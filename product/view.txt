--create or replace view vw_suche as

SELECT distinct

*
/*
c.CONTEXT_ID as CONTEXT_ID
, c.NAME as CON_NAME
, c.DATEARCHIVED as CON_DATEARCHIVED 
, I.ITEM_ID
, I.NAME as ITEM_NAME
, I.DATEARCHIVED as ITEM_DATEARCHIVED
, I.DATEARCHIVED is not null or c.DATEARCHIVED is not null as ELEMENT_ARCHIVED
--,(a.ATTRIBUTE_ID) as ATTRIBUTE
--, count (a.ATTRIBUTE_ID) as ATTRIBUTE
*/


FROM CONTEXT C
LEFT OUTER JOIN ITEM I
    ON I.CONTEXT_ID = C.CONTEXT_ID
LEFT OUTER JOIN ATTRIBUTE A
    ON I.ITEM_ID = A.ITEM_ID     
LEFT OUTER JOIN CONTEXT_KATEGORIE CK
    ON CK.CONTEXT_ID = C.CONTEXT_ID
    
ORDER BY c.CONTEXT_ID, i.NAME;  


--

select * from KATEGORY


WITH KATEGORY(KATEGORY_ID, PARENT_KATEGORY_ID) AS 
(
  SELECT KATEGORY_ID, PARENT_KATEGORY_ID FROM KATEGORY WHERE KATEGORY_ID = 1
    UNION ALL
  SELECT P1.KATEGORY_ID, P1.PARENT_KATEGORY_ID FROM KATEGORY P1, KATEGORY P2 WHERE P1.KATEGORY_ID = P2.PARENT_KATEGORY_ID
)
SELECT * FROM KATEGORY;


WITH RECURSIVE x(N) AS (
    SELECT 1
    UNION ALL
    SELECT N+1 FROM x WHERE N<10
) SELECT * FROM x;
    
--

WITH RECURSIVE KATEGORY(KATEGORY_ID, PARENT_KATEGORY_ID) AS (
    SELECT  KATEGORY_ID, PARENT_KATEGORY_ID FROM KATEGORY WHERE KATEGORY_ID = 1
       UNION ALL
    SELECT  KATEGORY_ID , PARENT_KATEGORY_ID from KATEGORY k1 WHERE k1.PARENT_KATEGORY_ID = KATEGORY_ID
)
SELECT * FROM KATEGORY;


--

WITH RECURSIVE KATEGORY (KATEGORY_ID, name, level, PARENT_KATEGORY_ID) AS (
  SELECT 
    KATEGORY_ID, 
    name,
    0,
    PARENT_KATEGORY_ID, 
    1 
  FROM KATEGORY
  WHERE PARENT_KATEGORY_ID is NULL

  UNION ALL 
  SELECT 
    t.KATEGORY_ID, 
    t.name,
    ts.level + 1, 
    ts.KATEGORY_ID, 
  FROM KATEGORY t, KATEGORY ts 
  WHERE t.PARENT_KATEGORY_ID = ts.KATEGORY_ID 
) 
SELECT * FROM KATEGORY 
WHERE level > 0 ;


--ORDER BY level, parent_id, node_order;




-- group by C.CONTEXT_ID, CON_NAME, CON_DATEARCHIVED , i.ITEM_ID, ITEM_NAME, ITEM_DATEARCHIVED, ELEMENT_ARCHIVED

-- ORDER BY CONTEXT_ID, ITEM_NAME;
